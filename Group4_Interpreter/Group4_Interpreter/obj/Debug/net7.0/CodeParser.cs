//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\School\CS322\group4-interpreter\Group4_Interpreter\Group4_Interpreter\Interpret\Code.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Group4_Interpreter.Interpret {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CodeParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		BEGIN_CODE=25, END_CODE=26, NEWLINE=27, BEGIN_IF=28, END_IF=29, WHILE=30, 
		BEGIN_WHILE=31, END_WHILE=32, INT=33, FLOAT=34, CHAR=35, BOOL=36, INTEGER_VALUES=37, 
		FLOAT_VALUES=38, CHARACTER_VALUES=39, BOOLEAN_VALUES=40, STRING_VALUES=41, 
		LOGICAL_OPERATORS=42, SCAN=43, IDENTIFIERS=44, COMMENTS=45, BLANK_LINES=46, 
		WHITESPACES=47;
	public const int
		RULE_programStructure = 0, RULE_programLines = 1, RULE_programStatements = 2, 
		RULE_variableInitialization = 3, RULE_assignmentOperator = 4, RULE_beginBlocks = 5, 
		RULE_ifCondition = 6, RULE_elseIfCondition = 7, RULE_whileLoop = 8, RULE_programDataTypes = 9, 
		RULE_constantValues = 10, RULE_expression = 11, RULE_multDivModOperators = 12, 
		RULE_addSubConcatenatorOperators = 13, RULE_comparisonOperators = 14, 
		RULE_logicalOperators = 15, RULE_openParenthesis = 16, RULE_closeParenthesis = 17, 
		RULE_methodCall = 18, RULE_display = 19, RULE_scanFunction = 20;
	public static readonly string[] ruleNames = {
		"programStructure", "programLines", "programStatements", "variableInitialization", 
		"assignmentOperator", "beginBlocks", "ifCondition", "elseIfCondition", 
		"whileLoop", "programDataTypes", "constantValues", "expression", "multDivModOperators", 
		"addSubConcatenatorOperators", "comparisonOperators", "logicalOperators", 
		"openParenthesis", "closeParenthesis", "methodCall", "display", "scanFunction"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'='", "'IF'", "'('", "')'", "'ELSE'", "'NOT'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'&'", "'=='", "'<>'", "'>'", "'<'", "'>='", 
		"'<='", "'['", "']'", "':'", "'DISPLAY'", null, null, null, null, null, 
		"'WHILE'", null, null, "'INT'", "'FLOAT'", "'CHAR'", "'BOOL'", null, null, 
		null, null, null, null, "'SCAN:'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "BEGIN_CODE", "END_CODE", "NEWLINE", "BEGIN_IF", "END_IF", "WHILE", 
		"BEGIN_WHILE", "END_WHILE", "INT", "FLOAT", "CHAR", "BOOL", "INTEGER_VALUES", 
		"FLOAT_VALUES", "CHARACTER_VALUES", "BOOLEAN_VALUES", "STRING_VALUES", 
		"LOGICAL_OPERATORS", "SCAN", "IDENTIFIERS", "COMMENTS", "BLANK_LINES", 
		"WHITESPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Code.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramStructureContext : ParserRuleContext {
		public ITerminalNode BEGIN_CODE() { return GetToken(CodeParser.BEGIN_CODE, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(CodeParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(CodeParser.NEWLINE, i);
		}
		public ITerminalNode END_CODE() { return GetToken(CodeParser.END_CODE, 0); }
		public ITerminalNode Eof() { return GetToken(CodeParser.Eof, 0); }
		public ProgramLinesContext[] programLines() {
			return GetRuleContexts<ProgramLinesContext>();
		}
		public ProgramLinesContext programLines(int i) {
			return GetRuleContext<ProgramLinesContext>(i);
		}
		public ProgramStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programStructure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterProgramStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitProgramStructure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramStructureContext programStructure() {
		ProgramStructureContext _localctx = new ProgramStructureContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programStructure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(BEGIN_CODE);
			State = 43; Match(NEWLINE);
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__23) | (1L << WHILE) | (1L << INT) | (1L << FLOAT) | (1L << CHAR) | (1L << BOOL) | (1L << SCAN) | (1L << IDENTIFIERS))) != 0)) {
				{
				{
				State = 44; programLines();
				}
				}
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 50; Match(NEWLINE);
			State = 51; Match(END_CODE);
			State = 52; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramLinesContext : ParserRuleContext {
		public VariableInitializationContext variableInitialization() {
			return GetRuleContext<VariableInitializationContext>(0);
		}
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ProgramStatementsContext programStatements() {
			return GetRuleContext<ProgramStatementsContext>(0);
		}
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public DisplayContext display() {
			return GetRuleContext<DisplayContext>(0);
		}
		public ScanFunctionContext scanFunction() {
			return GetRuleContext<ScanFunctionContext>(0);
		}
		public ProgramLinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programLines; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterProgramLines(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitProgramLines(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramLines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramLinesContext programLines() {
		ProgramLinesContext _localctx = new ProgramLinesContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_programLines);
		try {
			State = 61;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; variableInitialization();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; methodCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56; programStatements();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57; ifCondition();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 58; whileLoop();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 59; display();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 60; scanFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramStatementsContext : ParserRuleContext {
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ProgramStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterProgramStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitProgramStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramStatementsContext programStatements() {
		ProgramStatementsContext _localctx = new ProgramStatementsContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_programStatements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
			case FLOAT:
			case CHAR:
			case BOOL:
				{
				State = 63; assignmentOperator();
				}
				break;
			case IDENTIFIERS:
				{
				State = 64; methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 67; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializationContext : ParserRuleContext {
		public ProgramDataTypesContext programDataTypes() {
			return GetRuleContext<ProgramDataTypesContext>(0);
		}
		public ITerminalNode[] IDENTIFIERS() { return GetTokens(CodeParser.IDENTIFIERS); }
		public ITerminalNode IDENTIFIERS(int i) {
			return GetToken(CodeParser.IDENTIFIERS, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitialization; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterVariableInitialization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitVariableInitialization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializationContext variableInitialization() {
		VariableInitializationContext _localctx = new VariableInitializationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableInitialization);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; programDataTypes();
			State = 70; Match(IDENTIFIERS);
			State = 75;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 71; Match(T__1);
				State = 72; Match(IDENTIFIERS);
				}
				}
				State = 77;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 80;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 78; Match(T__2);
				State = 79; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ProgramDataTypesContext programDataTypes() {
			return GetRuleContext<ProgramDataTypesContext>(0);
		}
		public ITerminalNode IDENTIFIERS() { return GetToken(CodeParser.IDENTIFIERS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_assignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; programDataTypes();
			State = 83; Match(IDENTIFIERS);
			State = 84; Match(T__2);
			State = 85; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginBlocksContext : ParserRuleContext {
		public ITerminalNode BEGIN_CODE() { return GetToken(CodeParser.BEGIN_CODE, 0); }
		public ITerminalNode BEGIN_IF() { return GetToken(CodeParser.BEGIN_IF, 0); }
		public ITerminalNode BEGIN_WHILE() { return GetToken(CodeParser.BEGIN_WHILE, 0); }
		public BeginBlocksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginBlocks; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterBeginBlocks(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitBeginBlocks(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginBlocks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginBlocksContext beginBlocks() {
		BeginBlocksContext _localctx = new BeginBlocksContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_beginBlocks);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BEGIN_CODE) | (1L << BEGIN_IF) | (1L << BEGIN_WHILE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BEGIN_IF() { return GetToken(CodeParser.BEGIN_IF, 0); }
		public BeginBlocksContext beginBlocks() {
			return GetRuleContext<BeginBlocksContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(CodeParser.END_IF, 0); }
		public ElseIfConditionContext elseIfCondition() {
			return GetRuleContext<ElseIfConditionContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterIfCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitIfCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(T__3);
			State = 90; Match(T__4);
			State = 91; expression(0);
			State = 92; Match(T__5);
			State = 93; Match(BEGIN_IF);
			State = 94; beginBlocks();
			State = 95; Match(END_IF);
			State = 97;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 96; elseIfCondition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfConditionContext : ParserRuleContext {
		public ITerminalNode BEGIN_IF() { return GetToken(CodeParser.BEGIN_IF, 0); }
		public BeginBlocksContext beginBlocks() {
			return GetRuleContext<BeginBlocksContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(CodeParser.END_IF, 0); }
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public ElseIfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterElseIfCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitElseIfCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfConditionContext elseIfCondition() {
		ElseIfConditionContext _localctx = new ElseIfConditionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_elseIfCondition);
		try {
			State = 105;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; Match(T__6);
				{
				State = 100; Match(BEGIN_IF);
				State = 101; beginBlocks();
				State = 102; Match(END_IF);
				}
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104; ifCondition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(CodeParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BEGIN_WHILE() { return GetToken(CodeParser.BEGIN_WHILE, 0); }
		public ITerminalNode END_WHILE() { return GetToken(CodeParser.END_WHILE, 0); }
		public BeginBlocksContext[] beginBlocks() {
			return GetRuleContexts<BeginBlocksContext>();
		}
		public BeginBlocksContext beginBlocks(int i) {
			return GetRuleContext<BeginBlocksContext>(i);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(WHILE);
			State = 108; Match(T__4);
			State = 109; expression(0);
			State = 110; Match(T__5);
			State = 111; Match(BEGIN_WHILE);
			State = 115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BEGIN_CODE) | (1L << BEGIN_IF) | (1L << BEGIN_WHILE))) != 0)) {
				{
				{
				State = 112; beginBlocks();
				}
				}
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 118; Match(END_WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramDataTypesContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(CodeParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(CodeParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(CodeParser.BOOL, 0); }
		public ITerminalNode CHAR() { return GetToken(CodeParser.CHAR, 0); }
		public ProgramDataTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programDataTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterProgramDataTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitProgramDataTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramDataTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramDataTypesContext programDataTypes() {
		ProgramDataTypesContext _localctx = new ProgramDataTypesContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_programDataTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << CHAR) | (1L << BOOL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantValuesContext : ParserRuleContext {
		public ITerminalNode INTEGER_VALUES() { return GetToken(CodeParser.INTEGER_VALUES, 0); }
		public ITerminalNode FLOAT_VALUES() { return GetToken(CodeParser.FLOAT_VALUES, 0); }
		public ITerminalNode CHARACTER_VALUES() { return GetToken(CodeParser.CHARACTER_VALUES, 0); }
		public ITerminalNode BOOLEAN_VALUES() { return GetToken(CodeParser.BOOLEAN_VALUES, 0); }
		public ITerminalNode STRING_VALUES() { return GetToken(CodeParser.STRING_VALUES, 0); }
		public ConstantValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterConstantValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitConstantValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantValuesContext constantValues() {
		ConstantValuesContext _localctx = new ConstantValuesContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_constantValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER_VALUES) | (1L << FLOAT_VALUES) | (1L << CHARACTER_VALUES) | (1L << BOOLEAN_VALUES) | (1L << STRING_VALUES))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ConstantValuesContext constantValues() {
			return GetRuleContext<ConstantValuesContext>(0);
		}
		public ITerminalNode IDENTIFIERS() { return GetToken(CodeParser.IDENTIFIERS, 0); }
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultDivModOperatorsContext multDivModOperators() {
			return GetRuleContext<MultDivModOperatorsContext>(0);
		}
		public AddSubConcatenatorOperatorsContext addSubConcatenatorOperators() {
			return GetRuleContext<AddSubConcatenatorOperatorsContext>(0);
		}
		public ComparisonOperatorsContext comparisonOperators() {
			return GetRuleContext<ComparisonOperatorsContext>(0);
		}
		public LogicalOperatorsContext logicalOperators() {
			return GetRuleContext<LogicalOperatorsContext>(0);
		}
		public OpenParenthesisContext openParenthesis() {
			return GetRuleContext<OpenParenthesisContext>(0);
		}
		public CloseParenthesisContext closeParenthesis() {
			return GetRuleContext<CloseParenthesisContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 125; constantValues();
				}
				break;

			case 2:
				{
				State = 126; Match(IDENTIFIERS);
				}
				break;

			case 3:
				{
				State = 127; methodCall();
				}
				break;

			case 4:
				{
				State = 128; Match(T__4);
				State = 129; expression(0);
				State = 130; Match(T__5);
				}
				break;

			case 5:
				{
				State = 132; Match(T__7);
				State = 133; expression(6);
				}
				break;

			case 6:
				{
				State = 134; openParenthesis();
				State = 135; expression(0);
				State = 136; closeParenthesis();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 158;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 156;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 141; multDivModOperators();
						State = 142; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 144;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 145; addSubConcatenatorOperators();
						State = 146; expression(5);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 149; comparisonOperators();
						State = 150; expression(4);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 152;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 153; logicalOperators();
						State = 154; expression(3);
						}
						break;
					}
					} 
				}
				State = 160;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultDivModOperatorsContext : ParserRuleContext {
		public MultDivModOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multDivModOperators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterMultDivModOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitMultDivModOperators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultDivModOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultDivModOperatorsContext multDivModOperators() {
		MultDivModOperatorsContext _localctx = new MultDivModOperatorsContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_multDivModOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddSubConcatenatorOperatorsContext : ParserRuleContext {
		public AddSubConcatenatorOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addSubConcatenatorOperators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterAddSubConcatenatorOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitAddSubConcatenatorOperators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubConcatenatorOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddSubConcatenatorOperatorsContext addSubConcatenatorOperators() {
		AddSubConcatenatorOperatorsContext _localctx = new AddSubConcatenatorOperatorsContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_addSubConcatenatorOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorsContext : ParserRuleContext {
		public ComparisonOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterComparisonOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitComparisonOperators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorsContext comparisonOperators() {
		ComparisonOperatorsContext _localctx = new ComparisonOperatorsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_comparisonOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorsContext : ParserRuleContext {
		public ITerminalNode LOGICAL_OPERATORS() { return GetToken(CodeParser.LOGICAL_OPERATORS, 0); }
		public LogicalOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterLogicalOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitLogicalOperators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorsContext logicalOperators() {
		LogicalOperatorsContext _localctx = new LogicalOperatorsContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_logicalOperators);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(LOGICAL_OPERATORS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenParenthesisContext : ParserRuleContext {
		public OpenParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openParenthesis; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterOpenParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitOpenParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenParenthesisContext openParenthesis() {
		OpenParenthesisContext _localctx = new OpenParenthesisContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_openParenthesis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseParenthesisContext : ParserRuleContext {
		public CloseParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeParenthesis; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterCloseParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitCloseParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseParenthesisContext closeParenthesis() {
		CloseParenthesisContext _localctx = new CloseParenthesisContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_closeParenthesis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIERS() { return GetToken(CodeParser.IDENTIFIERS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_methodCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(IDENTIFIERS);
			State = 174; Match(T__22);
			State = 183;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 175; expression(0);
				State = 180;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 176; Match(T__1);
						State = 177; expression(0);
						}
						} 
					}
					State = 182;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DisplayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayContext display() {
		DisplayContext _localctx = new DisplayContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_display);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(T__23);
			State = 186; Match(T__22);
			State = 190;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 187; expression(0);
					}
					} 
				}
				State = 192;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScanFunctionContext : ParserRuleContext {
		public ITerminalNode SCAN() { return GetToken(CodeParser.SCAN, 0); }
		public ITerminalNode[] IDENTIFIERS() { return GetTokens(CodeParser.IDENTIFIERS); }
		public ITerminalNode IDENTIFIERS(int i) {
			return GetToken(CodeParser.IDENTIFIERS, i);
		}
		public ScanFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scanFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.EnterScanFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeListener typedListener = listener as ICodeListener;
			if (typedListener != null) typedListener.ExitScanFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeVisitor<TResult> typedVisitor = visitor as ICodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScanFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScanFunctionContext scanFunction() {
		ScanFunctionContext _localctx = new ScanFunctionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_scanFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(SCAN);
			State = 194; Match(IDENTIFIERS);
			State = 199;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 195; Match(T__1);
				State = 196; Match(IDENTIFIERS);
				}
				}
				State = 201;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);

		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x31\xCD\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x3\x2\x3\x2\x3\x2\a\x2\x30\n\x2\f\x2\xE\x2\x33\v\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3@\n"+
		"\x3\x3\x4\x3\x4\x5\x4\x44\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5"+
		"L\n\x5\f\x5\xE\x5O\v\x5\x3\x5\x3\x5\x5\x5S\n\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x64\n\b"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tl\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\a\nt\n\n\f\n\xE\nw\v\n\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x8D\n\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\a\r\x9F\n\r\f\r\xE\r\xA2\v\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\a\x14\xB5\n\x14\f\x14\xE\x14\xB8\v\x14\x5\x14\xBA\n\x14\x3\x15"+
		"\x3\x15\x3\x15\a\x15\xBF\n\x15\f\x15\xE\x15\xC2\v\x15\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\a\x16\xC8\n\x16\f\x16\xE\x16\xCB\v\x16\x3\x16\x2\x2\x3\x18"+
		"\x17\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2\x2\b\x5\x2\x1B\x1B"+
		"\x1E\x1E!!\x3\x2#&\x3\x2\'+\x3\x2\v\r\x3\x2\xE\x10\x3\x2\x11\x16\xD1\x2"+
		",\x3\x2\x2\x2\x4?\x3\x2\x2\x2\x6\x43\x3\x2\x2\x2\bG\x3\x2\x2\x2\nT\x3"+
		"\x2\x2\x2\fY\x3\x2\x2\x2\xE[\x3\x2\x2\x2\x10k\x3\x2\x2\x2\x12m\x3\x2\x2"+
		"\x2\x14z\x3\x2\x2\x2\x16|\x3\x2\x2\x2\x18\x8C\x3\x2\x2\x2\x1A\xA3\x3\x2"+
		"\x2\x2\x1C\xA5\x3\x2\x2\x2\x1E\xA7\x3\x2\x2\x2 \xA9\x3\x2\x2\x2\"\xAB"+
		"\x3\x2\x2\x2$\xAD\x3\x2\x2\x2&\xAF\x3\x2\x2\x2(\xBB\x3\x2\x2\x2*\xC3\x3"+
		"\x2\x2\x2,-\a\x1B\x2\x2-\x31\a\x1D\x2\x2.\x30\x5\x4\x3\x2/.\x3\x2\x2\x2"+
		"\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x34\x3\x2"+
		"\x2\x2\x33\x31\x3\x2\x2\x2\x34\x35\a\x1D\x2\x2\x35\x36\a\x1C\x2\x2\x36"+
		"\x37\a\x2\x2\x3\x37\x3\x3\x2\x2\x2\x38@\x5\b\x5\x2\x39@\x5&\x14\x2:@\x5"+
		"\x6\x4\x2;@\x5\xE\b\x2<@\x5\x12\n\x2=@\x5(\x15\x2>@\x5*\x16\x2?\x38\x3"+
		"\x2\x2\x2?\x39\x3\x2\x2\x2?:\x3\x2\x2\x2?;\x3\x2\x2\x2?<\x3\x2\x2\x2?"+
		"=\x3\x2\x2\x2?>\x3\x2\x2\x2@\x5\x3\x2\x2\x2\x41\x44\x5\n\x6\x2\x42\x44"+
		"\x5&\x14\x2\x43\x41\x3\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2"+
		"\x45\x46\a\x3\x2\x2\x46\a\x3\x2\x2\x2GH\x5\x14\v\x2HM\a.\x2\x2IJ\a\x4"+
		"\x2\x2JL\a.\x2\x2KI\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2"+
		"\x2NR\x3\x2\x2\x2OM\x3\x2\x2\x2PQ\a\x5\x2\x2QS\x5\x18\r\x2RP\x3\x2\x2"+
		"\x2RS\x3\x2\x2\x2S\t\x3\x2\x2\x2TU\x5\x14\v\x2UV\a.\x2\x2VW\a\x5\x2\x2"+
		"WX\x5\x18\r\x2X\v\x3\x2\x2\x2YZ\t\x2\x2\x2Z\r\x3\x2\x2\x2[\\\a\x6\x2\x2"+
		"\\]\a\a\x2\x2]^\x5\x18\r\x2^_\a\b\x2\x2_`\a\x1E\x2\x2`\x61\x5\f\a\x2\x61"+
		"\x63\a\x1F\x2\x2\x62\x64\x5\x10\t\x2\x63\x62\x3\x2\x2\x2\x63\x64\x3\x2"+
		"\x2\x2\x64\xF\x3\x2\x2\x2\x65\x66\a\t\x2\x2\x66g\a\x1E\x2\x2gh\x5\f\a"+
		"\x2hi\a\x1F\x2\x2il\x3\x2\x2\x2jl\x5\xE\b\x2k\x65\x3\x2\x2\x2kj\x3\x2"+
		"\x2\x2l\x11\x3\x2\x2\x2mn\a \x2\x2no\a\a\x2\x2op\x5\x18\r\x2pq\a\b\x2"+
		"\x2qu\a!\x2\x2rt\x5\f\a\x2sr\x3\x2\x2\x2tw\x3\x2\x2\x2us\x3\x2\x2\x2u"+
		"v\x3\x2\x2\x2vx\x3\x2\x2\x2wu\x3\x2\x2\x2xy\a\"\x2\x2y\x13\x3\x2\x2\x2"+
		"z{\t\x3\x2\x2{\x15\x3\x2\x2\x2|}\t\x4\x2\x2}\x17\x3\x2\x2\x2~\x7F\b\r"+
		"\x1\x2\x7F\x8D\x5\x16\f\x2\x80\x8D\a.\x2\x2\x81\x8D\x5&\x14\x2\x82\x83"+
		"\a\a\x2\x2\x83\x84\x5\x18\r\x2\x84\x85\a\b\x2\x2\x85\x8D\x3\x2\x2\x2\x86"+
		"\x87\a\n\x2\x2\x87\x8D\x5\x18\r\b\x88\x89\x5\"\x12\x2\x89\x8A\x5\x18\r"+
		"\x2\x8A\x8B\x5$\x13\x2\x8B\x8D\x3\x2\x2\x2\x8C~\x3\x2\x2\x2\x8C\x80\x3"+
		"\x2\x2\x2\x8C\x81\x3\x2\x2\x2\x8C\x82\x3\x2\x2\x2\x8C\x86\x3\x2\x2\x2"+
		"\x8C\x88\x3\x2\x2\x2\x8D\xA0\x3\x2\x2\x2\x8E\x8F\f\a\x2\x2\x8F\x90\x5"+
		"\x1A\xE\x2\x90\x91\x5\x18\r\b\x91\x9F\x3\x2\x2\x2\x92\x93\f\x6\x2\x2\x93"+
		"\x94\x5\x1C\xF\x2\x94\x95\x5\x18\r\a\x95\x9F\x3\x2\x2\x2\x96\x97\f\x5"+
		"\x2\x2\x97\x98\x5\x1E\x10\x2\x98\x99\x5\x18\r\x6\x99\x9F\x3\x2\x2\x2\x9A"+
		"\x9B\f\x4\x2\x2\x9B\x9C\x5 \x11\x2\x9C\x9D\x5\x18\r\x5\x9D\x9F\x3\x2\x2"+
		"\x2\x9E\x8E\x3\x2\x2\x2\x9E\x92\x3\x2\x2\x2\x9E\x96\x3\x2\x2\x2\x9E\x9A"+
		"\x3\x2\x2\x2\x9F\xA2\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2"+
		"\x2\xA1\x19\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA4\t\x5\x2\x2\xA4\x1B"+
		"\x3\x2\x2\x2\xA5\xA6\t\x6\x2\x2\xA6\x1D\x3\x2\x2\x2\xA7\xA8\t\a\x2\x2"+
		"\xA8\x1F\x3\x2\x2\x2\xA9\xAA\a,\x2\x2\xAA!\x3\x2\x2\x2\xAB\xAC\a\x17\x2"+
		"\x2\xAC#\x3\x2\x2\x2\xAD\xAE\a\x18\x2\x2\xAE%\x3\x2\x2\x2\xAF\xB0\a.\x2"+
		"\x2\xB0\xB9\a\x19\x2\x2\xB1\xB6\x5\x18\r\x2\xB2\xB3\a\x4\x2\x2\xB3\xB5"+
		"\x5\x18\r\x2\xB4\xB2\x3\x2\x2\x2\xB5\xB8\x3\x2\x2\x2\xB6\xB4\x3\x2\x2"+
		"\x2\xB6\xB7\x3\x2\x2\x2\xB7\xBA\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\xB1"+
		"\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\'\x3\x2\x2\x2\xBB\xBC\a\x1A\x2\x2"+
		"\xBC\xC0\a\x19\x2\x2\xBD\xBF\x5\x18\r\x2\xBE\xBD\x3\x2\x2\x2\xBF\xC2\x3"+
		"\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1)\x3\x2\x2\x2\xC2"+
		"\xC0\x3\x2\x2\x2\xC3\xC4\a-\x2\x2\xC4\xC9\a.\x2\x2\xC5\xC6\a\x4\x2\x2"+
		"\xC6\xC8\a.\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xCB\x3\x2\x2\x2\xC9\xC7\x3\x2"+
		"\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA+\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\x11\x31"+
		"?\x43MR\x63ku\x8C\x9E\xA0\xB6\xB9\xC0\xC9";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Group4_Interpreter.Interpret
